
# Ορισμός (1) συνολικού αριθμού βημάτων (2) μεγέθους βημάτων (3) αρχικών συνθηκών
number_of_steps = 11
steps = 0.5, -0.5
x_0 = 0
y_0 = 0.5

# Συνάρτηση για τον υπολογισμό της παραγώγου σε κάθε βήμα της μεθόδου Euler
# Δέχεται ορίσματα εισόδου τις τρέχουσες τιμές των x & y και 
# επιστρέφει τη παράγωγο (σημείωση : στη συγκεκριμένη εφαρμογή τυχαίνει print()
# η συνάρτηση που εκφράζει τη παράγωγο στο δεξιό μέλος της διαφορικής εξίσωσης
# να είναι απολειστικά συνάρτηση του y)
def slope(x, y):
    return y * (1-y)

# Συνάρτηση υλοποίησης της μεθόδου του Euler
# ---> σύμφωνα με τις οδηγίες της άσκησης <--------

# Ορίσματα εισόδου : (1) Συνάρτηση υπολογισμού της παραγώγου
#                    (2) αρχική συνθήκη για τη μεταβλητή x
#                    (3) αρχική συνθήκη για τη μεταβλητή y
#                    (4) τιμή βήματος
#                    (5) αριθμός βημάτων που θα χρησιμοποιηθούν

def euler(f, init_x, init_y, Dx, N):

# Αρχικοποίηση λίστας για όλες τις τιμές της μεταβλητής x
    x = [ init_x + pos*Dx  for pos  in range(N)] 
# Καθορισμός 1ης τιμής της λίστας για τις τιμές της μεταβλητής y
    y = [init_y] 

# Υλοποίηση της μεθόδου μέσω ενός : for loop για όλα τα βήματα , 
# με εκκίνηση τις αρχικές συνθήκες (βήμα j = 0)
# Χρησιμιποιείται σε κάθε βήμα η τιμή της y καθώς και της y' 
# (διαμέσου της συνάρτησης f) από το προηγούμενο βήμα. 

    for step in range(1,N):
        y.append(y[step-1] + Dx * f(x[step-1], y[step-1]))

    print(f'Περιγραφή των αποτελεσμάτων επίλυσης με μέθοδο Euler')

#             Θετικό βήμα : Εκτύπωση κατά αύξουσα σειρά της μεταβλητής x:

    if Dx > 0:
        print(f'      Bήμα i     Θέση x(i)    Εκτίμηση y(i)')
        for index in range(N):
            print(f'{index: 10d}     {x[index]:10.4f}     {y[index]:10.4f}')
            
#             Αρνητικό βήμα : Εκτύπωση κατά φθίνουσα σειρά της μεταβλητής x:       
    else : 
        print(f'      Bήμα i     Θέση x(i)    Εκτίμηση y(i)')
# Εδώ αντιστρέφουμε τις λίστες με τις τιμές των μεταβλητών x και y και
# ταυτοχρόνως εκτυπώνουμε το δείκτη του βήματος κατά φθίνουσα σειρά. 
        x.reverse()   
        y.reverse() 
        for index in range(N):
            print(f'{(N-1)-index: 10d}     {x[index]:10.4f}     {y[index]:10.4f}')
            
    print()
    
# Επιστροφή στο κύριο πρόγραμμα των τιμών των x και y για όλα τα βήματα
# σε περίπτωση που απαιτηθεί κάποια τυχόν περαιτέρω επεξεργασία τους 
# (π.χ γραφική απεικόνιση) - για την ασκησή μας δεν χρειάζεται πάντως.

    return x, y

# Κλήση της κύριας συνάρτησης υλοποίησης της μεθόδου του Euler για τη συγκεκριμένη
# διαφορική που μας δίνεται στην άσκηση και για τις συγκεκριμένες αρχικές συνθήκες
# και για τις δύο επιλογές βήματος (θετικό & αρνητικό).
for step in steps:
    euler(slope, x_0, y_0, step, number_of_steps)
    